# Copyright (c) 2013  Niklas Rosenstein
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

::include "beak/compilers/gcc.beak"        as cc
::include "beak/archivers/ar.beak"         as ar
::include "beak/platforms/unix.beak"       as pl

flags = cc.warnAll
::if {bool ENV.DEBUG}
    ..flags = !flags cc.debug
::else
    ..flags = !flags cc.optimizeAll

@basemodule

    filename = {error "filename is not defined by subclass."}

    sources = {localpath {join "src/" filename}}
    include = {localpath "src/"}
    linkWith=
    temp    = {localpath {join "src/" {suffix filename "o"}}}
    targetName = {pl.libname filename}
    target  = {localpath {join "build/" targetName}}
    flags   =

    doArchive = "true"

    @perform

        newFlags = ...flags flags {zip cc.I include}

        ::if doArchive
            ::if {update sources temp}
                $ pl.mkdir {dirname temp target}
                $ cc newFlags cc.compileOnly sources cc.o temp
            ::if {update temp target}
                $ ar ar.objectLib target temp
        ::else
            ::if {update sources target}
                $ pl.mkdir {dirname temp target}
                $ cc newFlags sources linkWith cc.o target

    @clean

        ::if doArchive
            $ pl.remove temp
        ::else
            $ pl.remove target

@ansiescape : basemodule

    filename = "ansiescape.c"

@gol : basemodule

    filename = "gol.c"

@ppm : basemodule

    filename = "ppm.c"

@main : basemodule < ansiescape gol ppm

    filename = "main.c"
    targetName = {pl.exename "main"}
    linkWith = ansiescape.target gol.target ppm.target
    doArchive = "false"

@test < main

    @perform
        $ main.target

